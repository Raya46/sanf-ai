(()=>{var e={};e.id=592,e.ids=[592],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},8719:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{isRequestAPICallableInsideAfter:function(){return c},throwForSearchParamsAccessInUseCache:function(){return s},throwWithStaticGenerationBailoutError:function(){return o},throwWithStaticGenerationBailoutErrorWithDynamicError:function(){return i}});let n=r(80023),a=r(3295);function o(e,t){throw Object.defineProperty(new n.StaticGenBailoutError(`Route ${e} couldn't be rendered statically because it used ${t}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`),"__NEXT_ERROR_CODE",{value:"E576",enumerable:!1,configurable:!0})}function i(e,t){throw Object.defineProperty(new n.StaticGenBailoutError(`Route ${e} with \`dynamic = "error"\` couldn't be rendered statically because it used ${t}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`),"__NEXT_ERROR_CODE",{value:"E543",enumerable:!1,configurable:!0})}function s(e){let t=Object.defineProperty(Error(`Route ${e.route} used "searchParams" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "searchParams" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`),"__NEXT_ERROR_CODE",{value:"E634",enumerable:!1,configurable:!0});throw e.invalidUsageError??=t,t}function c(){let e=a.afterTaskAsyncStorage.getStore();return(null==e?void 0:e.rootTaskSpawnPhase)==="action"}},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},43763:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ReflectAdapter",{enumerable:!0,get:function(){return r}});class r{static get(e,t,r){let n=Reflect.get(e,t,r);return"function"==typeof n?n.bind(e):n}static set(e,t,r,n){return Reflect.set(e,t,r,n)}static has(e,t){return Reflect.has(e,t)}static deleteProperty(e,t){return Reflect.deleteProperty(e,t)}}},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},72609:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{describeHasCheckingStringProperty:function(){return a},describeStringPropertyAccess:function(){return n},wellKnownProperties:function(){return o}});let r=/^[A-Za-z_$][A-Za-z0-9_$]*$/;function n(e,t){return r.test(t)?"`"+e+"."+t+"`":"`"+e+"["+JSON.stringify(t)+"]`"}function a(e,t){let r=JSON.stringify(t);return"`Reflect.has("+e+", "+r+")`, `"+r+" in "+e+"`, or similar"}let o=new Set(["hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toString","valueOf","toLocaleString","then","catch","finally","status","displayName","toJSON","$$typeof","__esModule"])},77169:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>f,routeModule:()=>l,serverHooks:()=>m,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>p});var n={};r.r(n),r.d(n,{GET:()=>u});var a=r(96559),o=r(48088),i=r(37719),s=r(32190);let c=JSON.parse('{"energy":[{"name":"Crude Oil","unit":"USD/Bbl","price":64.757,"day":-0.763,"percent":-1.16},{"name":"Brent","unit":"USD/Bbl","price":66.336,"day":-0.464,"percent":-0.69},{"name":"Natural gas","unit":"USD/Bbl","price":3.4607,"day":-0.2783,"percent":-7.44},{"name":"Gasoline","unit":"USD/Gal","price":2.0664,"day":-0.0143,"percent":-0.69},{"name":"Heating Oil","unit":"USD/Gal","price":2.2637,"day":-0.0435,"percent":-1.89},{"name":"Coal","unit":"USD/T","price":107,"day":0.85,"percent":0.8},{"name":"Uranium","unit":"USD/Lbs","price":79.05,"day":0.55,"percent":0.7}],"mainIndicators":[{"name":"GDP Growth Rate","value":"2.1%"},{"name":"Interest Rate","value":"5.50%"},{"name":"Inflation Rate","value":"5.3%"},{"name":"Unemployment Rate","value":"3.5%"},{"name":"Government Debt to GDP","value":"98.2%"},{"name":"Balance of Trade","value":"-67.4B"},{"name":"Current Account to GDP","value":"-3.1%"},{"name":"Credit Rating","value":"AA+"}],"sidebarIndicators":[{"name":"Inflation Rate","value":"5.3%"},{"name":"Interest Rate","value":"5.50%"},{"name":"GDP Growth Rate","value":"2.1%"},{"name":"Unemployment Rate","value":"3.5%"}],"markets":[{"name":"Commodity"},{"name":"Currency"},{"name":"Government Bond 10Y"},{"name":"Stock Market"}]}');async function u(){try{return await new Promise(e=>setTimeout(e,500)),s.NextResponse.json(c)}catch(e){return console.error("Error in macroeconomics API route:",e),s.NextResponse.json({message:"Failed to fetch macroeconomic data"},{status:500})}}let l=new a.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/macroeconomics/route",pathname:"/api/macroeconomics",filename:"route",bundlePath:"app/api/macroeconomics/route"},resolvedPagePath:"C:\\Users\\raya\\project\\belajar_nextjs\\sanf-ai\\src\\app\\api\\macroeconomics\\route.ts",nextConfigOutput:"standalone",userland:n}),{workAsyncStorage:d,workUnitAsyncStorage:p,serverHooks:m}=l;function f(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:p})}},78335:()=>{},96487:()=>{}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[719,580],()=>r(77169));module.exports=n})();